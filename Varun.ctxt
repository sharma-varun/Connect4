#BlueJ class context
comment0.params=game\ iAmRed\ name
comment0.target=Varun(Connect4Game,\ boolean,\ java.lang.String)
comment0.text=\r\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\r\n\r\n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\r\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\r\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\r\n\ already\ been\ won.\r\n
comment2.params=columnNumber
comment2.target=void\ moveOnColumn(int)
comment2.text=\r\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\r\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\r\n\r\n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\r\n
comment3.params=column
comment3.target=int\ getLowestEmptyIndex(Connect4Column)
comment3.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column.\r\n\r\n\ @param\ column\ The\ column\ to\ check.\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\r\n
comment4.params=
comment4.target=int\ randomMove()
comment4.text=\r\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\r\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\r\n\r\n\ @return\ a\ random\ valid\ move.\r\n
comment5.params=
comment5.target=java.lang.String\ getName()
comment5.text=\r\n\ Returns\ the\ name\ of\ this\ agent.\r\n\r\n\ @return\ the\ agent's\ name\r\n
comment6.params=red
comment6.target=int\ CanWinGame(boolean)
comment6.text=\r\n\ \ \ \ \ \ This\ function\ takes\ in\ the\ currentPlayer\ as\ boolean\ value,\ if\ the\ current\ move\ can\ win\ the\ game\r\n\ \ \ \ \ \ for\ the\ player,\ if\ yes\ then\ returns\ the\ column\ to\ be\ played\ else\ returns\ -1.\r\n\ \ \ \ \ \ @param\ boolean\ playerColor\r\n\ \ \ \ \ \ @return\ column\ index\ of\ the\ board\r\n
comment7.params=myRed\ slot1\ slot2\ slot3
comment7.target=boolean\ CheckSlots(boolean,\ Connect4Slot,\ Connect4Slot,\ Connect4Slot)
comment7.text=\r\n\ \ \ \ \ This\ function\ is\ a\ helper\ function\ for\ the\ CanWinGame()\ function\ where,\ it\ takes\ the\ boolean\ state\ of\ the\ current\r\n\ \ \ \ \ player,\ and\ three\ Connect4Slots\ and\ checks\ if\ they\ are\ all\ the\ same\ color.\ Returns\ true\ if\ yes\ or\ else\ returns\ false.\r\n\ \ \ \ \ @param\ boolean\ value,\ Connect4Slot_1,\ Connect4Slot_2,\ Connect4Slot_3\r\n\ \ \ \ \ @return\ true\ or\ false\ (boolean)\r\n
numComments=8
